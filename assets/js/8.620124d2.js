(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{360:function(t,s,a){t.exports=a.p+"assets/img/gc.cf1dcc94.jpg"},382:function(t,s,a){"use strict";a.r(s);var n=a(42),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"作业：1-2，es新特性与typescript、js性能优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作业：1-2，es新特性与typescript、js性能优化"}},[t._v("#")]),t._v(" 作业：1-2，ES新特性与TypeScript、JS性能优化")]),t._v(" "),n("h2",{attrs:{id:"简答题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简答题"}},[t._v("#")]),t._v(" 简答题")]),t._v(" "),n("h3",{attrs:{id:"一、请说出下列最终的执行结果，并解释为什么。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、请说出下列最终的执行结果，并解释为什么。"}},[t._v("#")]),t._v(" 一、请说出下列最终的执行结果，并解释为什么。")]),t._v(" "),n("div",{staticClass:"language-JavaScript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[n("em",[n("strong",[t._v("解答如下")])]),t._v(":")]),t._v(" "),n("p",[t._v("输出10，循环执行的过程，给数组a每个位置均定义了一个函数，每个函数各自独立，但功能一模一样。\nfor循环条件语句内定义的变量i，实质上是全局作用域内的变量，因此循环提结束运行后，变量i值变为10.")]),t._v(" "),n("p",[t._v("当 "),n("code",[t._v("a[6]()")]),t._v(" 执行的时候，实际上执行了函数"),n("code",[t._v("function() {console.log(i)}")]),t._v(",执行的过程中，在函数作用域内没有发现变量i，继续向上一级也就是全局作用域查找，发现i，此时i经过循环，现值为10，因此最终打印出10。")]),t._v(" "),n("h3",{attrs:{id:"二、请说出下列最终的执行结果，并解释为什么。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、请说出下列最终的执行结果，并解释为什么。"}},[t._v("#")]),t._v(" 二、请说出下列最终的执行结果，并解释为什么。")]),t._v(" "),n("div",{staticClass:"language-JavaScript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tmp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tmp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" tmp\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("em",[n("strong",[t._v("解答如下")])]),t._v(":")]),t._v(" "),n("p",[t._v("报出引用错误，在初始化之前不能访问 'tmp'。")]),t._v(" "),n("p",[t._v("因为在if语句块中定义了局部变量"),n("code",[t._v("let tmp")]),t._v("， 因此该语句块内部（{}），从开始到，声明"),n("code",[t._v("let tmp")]),t._v("处，\n对于变量"),n("code",[t._v("tmp")]),t._v("，会形成"),n("code",[t._v("暂时性死区")]),t._v("，无法访问tmp，因而报错。")]),t._v(" "),n("p",[t._v("ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。")]),t._v(" "),n("h3",{attrs:{id:"三、结合es6新语法，用最简单的方式找出数组中的最小值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、结合es6新语法，用最简单的方式找出数组中的最小值"}},[t._v("#")]),t._v(" 三、结合ES6新语法，用最简单的方式找出数组中的最小值")]),t._v(" "),n("div",{staticClass:"language-JavaScript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("34")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("89")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),n("p",[n("em",[n("strong",[t._v("解答如下")])]),t._v(":")]),t._v(" "),n("p",[t._v("首先，无论如何，数组都至少遍历一遍，是个O(n)的算法。那就是找形式上看起来最简便的方法，如下：")]),t._v(" "),n("div",{staticClass:"language-JavaScript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 书写形式最简便的：")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" min "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其他的手动遍历的：")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" min2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" min3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),n("h3",{attrs:{id:"四、请详细说明var，let，const三种声明变量的方式之间的具体差别。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、请详细说明var，let，const三种声明变量的方式之间的具体差别。"}},[t._v("#")]),t._v(" 四、请详细说明var，let，const三种声明变量的方式之间的具体差别。")]),t._v(" "),n("p",[n("em",[n("strong",[t._v("解答如下")])]),t._v(":")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("var：")]),t._v(" "),n("ul",[n("li",[t._v("ES6之前声明变量的方式，没有块级作用域的概念，只有全局变量和函数作用域变量。")]),t._v(" "),n("li",[t._v("存在变量提升现象。")]),t._v(" "),n("li",[t._v("可以先使用后声明,此时在赋值位置之前使用会返回undefined。")]),t._v(" "),n("li",[t._v("同一个变量可以重复使用var关键词进行定义。")])])]),t._v(" "),n("li",[n("p",[t._v("let:")]),t._v(" "),n("ul",[n("li",[t._v("ES6新增的声明块级作用域变量的方式，定义let变量的区域（{}范围）形成块级作用域，该变量仅在此作用域内有效。")]),t._v(" "),n("li",[t._v("let不存在变量提升现象")]),t._v(" "),n("li",[t._v("在块级作用域内部，直到声明语句之前，形成变量的暂时性死区，此时不能访问该变量。")]),t._v(" "),n("li",[t._v("let定义的变量必须要先声明然后再使用。")]),t._v(" "),n("li",[t._v("同个作用域里，使用let不能重复声明变量")])])]),t._v(" "),n("li",[n("p",[t._v("const：")]),t._v(" "),n("ul",[n("li",[t._v("const类似于let，是声明常量使用的,")]),t._v(" "),n("li",[t._v("声明变量必须赋初始值，且之后不能再被更改。")]),t._v(" "),n("li",[t._v("声明一个引用类型数据的常量，可以修改这个常量上的属性。只是不能修改常量本身的值（引用地址）")])])])]),t._v(" "),n("h3",{attrs:{id:"五、请说出下列代码最终输出的结果，并解释为什么。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、请说出下列代码最终输出的结果，并解释为什么。"}},[t._v("#")]),t._v(" 五、请说出下列代码最终输出的结果，并解释为什么。")]),t._v(" "),n("div",{staticClass:"language-JavaScript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[n("em",[n("strong",[t._v("解答如下")])]),t._v(":")]),t._v(" "),n("p",[t._v("输出：20，当执行"),n("code",[t._v("obj.fn()")]),t._v(",因为fn函数是一个普通函数，由obj对象调用。因此，此时fn函数的执行上下文（this）指向obj对象。fn执行过程中，设置了一个定时器，该定时器定义了一个回调函数，这个回调函数是个箭头函数，没有自己的this，因此this指向声明时所处环境的this。也就是fn函数的this。综上，定时器内部回调函数的this在fn执行的时候指向obj，因此，this.a也就是obj.a。输出20。")]),t._v(" "),n("h3",{attrs:{id:"六、简述symbol类型的用途。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六、简述symbol类型的用途。"}},[t._v("#")]),t._v(" 六、简述Symbol类型的用途。")]),t._v(" "),n("p",[n("em",[n("strong",[t._v("解答如下")])]),t._v(":")]),t._v(" "),n("p",[t._v("在ES5中，对象属性名都是字符串容易造成属性名冲突。为了避免这种情况的发生，ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。")]),t._v(" "),n("p",[t._v("因而，利用这个特性，对以下场景可使用Symbol：")]),t._v(" "),n("ol",[n("li",[t._v("不需要对外操作和访问的属性使用Symbol来定义。")]),t._v(" "),n("li",[t._v("使用Symbol来替代常量。")]),t._v(" "),n("li",[t._v("使用Symbol定义类的私有属性/方法，使得实例上访问不到symbol属性。")]),t._v(" "),n("li",[t._v("注册和获取全局Symbol，Symbol不光在单个window中是唯一的，在多个相关window间也是唯一的。")]),t._v(" "),n("li",[t._v("iterator迭代器使用Symbol定义")])]),t._v(" "),n("h3",{attrs:{id:"七、说说什么是浅拷贝，什么是深拷贝？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#七、说说什么是浅拷贝，什么是深拷贝？"}},[t._v("#")]),t._v(" 七、说说什么是浅拷贝，什么是深拷贝？")]),t._v(" "),n("p",[n("em",[n("strong",[t._v("解答如下")])]),t._v(":")]),t._v(" "),n("p",[t._v("浅拷贝（shallowCopy）和 深拷贝（deepCopy），最根本的区别在于是否真正获取一个对象的复制实体，而不是引用")]),t._v(" "),n("p",[t._v("浅拷贝，是字面量的复制，复制的仅仅是引用对象所在的内存地址，浅拷贝只是增加了一个指针指向已存在的内存地址，因此，效果上还是指向同一个对象，对原有变量更改的时候，会影响现有对象的值。")]),t._v(" "),n("p",[t._v("深拷贝，就是为了解决引用对象复制问题的。在复制引用对象的时候，创建新的内存空间，拷贝对象的具体内容，将原有对象的属性遍历复制到新的对象上。复制的结果是一个新的对象，变量所存放的该引用对象的地址也是全新的。其内容地址是自助分配的,拷贝结束之后,内存中的值是完全相同的,但是内存地址是不一样的,两个对象之间相互不影响,也互不干涉。")]),t._v(" "),n("p",[t._v("浅拷贝的方法：遍历对象属性赋值，Object.assign()，展开运算符...")]),t._v(" "),n("p",[t._v("深拷贝的方法：浅拷贝+递归，JSON.parse(JSON.stringify(obj))，lodash方法。")]),t._v(" "),n("p",[t._v("JSON.parse(JSON.stringify())这个方法有一定的局限性，序列化时遇到如下情况需要注意：")]),t._v(" "),n("ul",[n("li",[t._v("时间对象 => 字符串的形式")]),t._v(" "),n("li",[t._v("RegExp,Error => {}")]),t._v(" "),n("li",[t._v("会丢失 function,undefined")]),t._v(" "),n("li",[t._v("NaN,Infinity,-Infinity => null")]),t._v(" "),n("li",[t._v("如果对象中存在循环引用的情况也无法实现深拷贝")])]),t._v(" "),n("h3",{attrs:{id:"八、请简述typescript与javascript之间的关系。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#八、请简述typescript与javascript之间的关系。"}},[t._v("#")]),t._v(" 八、请简述TypeScript与JavaScript之间的关系。")]),t._v(" "),n("p",[n("em",[n("strong",[t._v("解答如下")])]),t._v(":")]),t._v(" "),n("p",[t._v("简而言之，TypeScript是JavaScript的超集。")]),t._v(" "),n("p",[t._v("在实现了原有JavaScript所有API的基础上，扩展了类型系统。")]),t._v(" "),n("p",[t._v("JavaScript是一门动态类型弱类型的语言。在执行的时候才会确定变量的类型。无需编译，直接能在浏览器引擎和node环境中直接运行。")]),t._v(" "),n("p",[t._v("TypeScript是一门静态类型强类型的语言。方便了静态检查。需要编译为js后才能运行。")]),t._v(" "),n("h3",{attrs:{id:"九、请谈谈你所认为的typescript优缺点。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#九、请谈谈你所认为的typescript优缺点。"}},[t._v("#")]),t._v(" 九、请谈谈你所认为的TypeScript优缺点。")]),t._v(" "),n("p",[n("em",[n("strong",[t._v("解答如下")])]),t._v(":")]),t._v(" "),n("p",[t._v("TypeScript优点：")]),t._v(" "),n("ol",[n("li",[t._v("使用 TS 新特性开发项目，项目代码的健壮性增强，代码错误更早暴露。")]),t._v(" "),n("li",[t._v("编辑器支持情况良好，比如：VSCode，有很多智能提示，编码更准确，提升开发效率。")]),t._v(" "),n("li",[t._v("使用 TS 的强类型特性来开发项目，可以使得项目代码重构更牢靠。")]),t._v(" "),n("li",[t._v("使用 TS 的强类型特性来编写代码，可以减少很多不必要的类型判断。")]),t._v(" "),n("li",[t._v("TS 最终会被编译为 JS 运行，可以将 ES6+ 编译为ES5/ES3，兼容性好。")]),t._v(" "),n("li",[t._v("TS 是渐进式的，完全可以使用 JS 编写代码，可以将新特性慢慢应用到项目中。")])]),t._v(" "),n("p",[t._v("TypeScript缺点：")]),t._v(" "),n("ol",[n("li",[t._v("引入了很多概念和新语法，有一定学习成本。")]),t._v(" "),n("li",[t._v("在项目较小，不需要以后的维护，并且没有多人协同开发的情况下，不够灵活，需要额外编写声明文件，做出类型限制。增加了额外的工作量。")]),t._v(" "),n("li",[t._v("网上资料相对js来说要少，查找一些开发问题的解决办法较为困难。")])]),t._v(" "),n("h3",{attrs:{id:"十、描述引用计数的工作原理和优缺点。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十、描述引用计数的工作原理和优缺点。"}},[t._v("#")]),t._v(" 十、描述引用计数的工作原理和优缺点。")]),t._v(" "),n("p",[n("em",[n("strong",[t._v("解答如下")])]),t._v(":")]),t._v(" "),n("p",[n("strong",[t._v("工作原理")]),t._v("：")]),t._v(" "),n("p",[t._v("核心思想是在内部通过一个"),n("code",[t._v("引用计数器")]),t._v("来维护一个当前对象的引用数。通过设置引用数，判断当前引用数是否为0，引用关系改变的时候会修改引用数字，引用数字变为0立即回收。")]),t._v(" "),n("p",[n("strong",[t._v("优点")]),t._v("：")]),t._v(" "),n("ol",[n("li",[t._v("发现垃圾的时候可以及时回收垃圾对象。")]),t._v(" "),n("li",[t._v("最大限度减少程序暂停。时刻监控引用为0的对象，会立即释放，不会使程序达到内存上限。")])]),t._v(" "),n("p",[n("strong",[t._v("缺点")]),t._v("：")]),t._v(" "),n("ol",[n("li",[t._v("无法回收循环引用对象")]),t._v(" "),n("li",[t._v("时间开销大，当前引用计数器维护一个数值变化，时刻监控是否需要修改，会有额外开销。")])]),t._v(" "),n("h3",{attrs:{id:"十一、描述标记整理算法的工作流程。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十一、描述标记整理算法的工作流程。"}},[t._v("#")]),t._v(" 十一、描述标记整理算法的工作流程。")]),t._v(" "),n("p",[n("em",[n("strong",[t._v("解答如下")])]),t._v(":")]),t._v(" "),n("p",[t._v("标记整理可以看做是标记清除的增强操作。算法不直接对可回收对象进行清理，而是让所有可用的对象都向一端移动。然后直接清理掉边界以外的内存。")]),t._v(" "),n("p",[t._v("分为两个阶段，"),n("code",[t._v("标记阶段")]),t._v("和"),n("code",[t._v("整理清除阶段")]),t._v("。")]),t._v(" "),n("p",[n("strong",[t._v("标记阶段")]),t._v("：遍历并标记活动对象，将其记录为可达对象。")]),t._v(" "),n("p",[n("strong",[t._v("整理清除阶段")]),t._v(": 通过数次搜索堆内存，从头到尾进行线性的遍历，如果发现某个对象没有标记为可达对象，通过读取对象信息，则将对象的地址进行移动，重新装填活动对象，使其在地址上连续，然后再回收。")]),t._v(" "),n("h3",{attrs:{id:"十二、描述v8中新生代存储区垃圾回收的流程。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十二、描述v8中新生代存储区垃圾回收的流程。"}},[t._v("#")]),t._v(" 十二、描述V8中新生代存储区垃圾回收的流程。")]),t._v(" "),n("p",[n("em",[n("strong",[t._v("解答如下")])]),t._v(":")]),t._v(" "),n("p",[t._v("V8采用分代回收的思想。分为新生代和老生代，分别采用不同的算法。")]),t._v(" "),n("p",[t._v("新生代回收过程采用复制算法+标记整理算法，新生代内存区被分为两个等大小的空间，一个是使用空间From，另一个为空闲空间To，活动对象存储于From空间，标记整理后将活动对象"),n("code",[t._v("拷贝")]),t._v("到To，From与To交换空间完成释放，"),n("code",[t._v("拷贝")]),t._v("过程中有可能出现晋升。")]),t._v(" "),n("p",[n("strong",[t._v("晋升")]),t._v(": 晋升就是将新生代对象移动至老生代。晋升的触发条件有两条：一轮GC后还存活的新生代活动对象，或者To空间使用率超过25%。")]),t._v(" "),n("h3",{attrs:{id:"十三、描述增量标记算法在何时使用及工作原理。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十三、描述增量标记算法在何时使用及工作原理。"}},[t._v("#")]),t._v(" 十三、描述增量标记算法在何时使用及工作原理。")]),t._v(" "),n("p",[n("em",[n("strong",[t._v("解答如下")])]),t._v(":")]),t._v(" "),n("p",[n("strong",[t._v("使用时机")]),t._v("：老生代的对象回收时候，为了对效率进行优化(对比新生代区域的复制算法来说)，会采用增量标记算法。")]),t._v(" "),n("p",[n("strong",[t._v("工作原理")]),t._v(": 垃圾回收的时候，实际上是会阻塞js主线程的执行，为了减缓这种阻塞的感觉，将遍历对象进行标记的"),n("code",[t._v("标记")]),t._v("这个操作，拆分为多个阶段，微观上使标记与程序主线程交替进行执行，宏观上就是并发执行，使程序主线程运行更流畅。过程如图所示：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(360),alt:""}})])])}),[],!1,null,null,null);s.default=r.exports}}]);